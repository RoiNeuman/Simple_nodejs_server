{"version":3,"sources":["../../src/app/cluster.js"],"names":["cluster","require","numCPUs","cpus","length","isMaster","i","fork","on","worker","console","log","id"],"mappings":"AAAA;AACA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA;AACA,IAAMC,UAAUD,QAAQ,IAAR,EAAcE,IAAd,GAAqBC,MAArC;;AAEA,IAAIJ,QAAQK,QAAZ,EAAsB;AAClB;AACA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAApB,EAA6BI,KAAK,CAAlC,EAAqC;AACjCN,gBAAQO,IAAR;AACH;;AAED;AACAP,YAAQQ,EAAR,CAAW,MAAX,EAAmB,UAASC,MAAT,EAAiB;AAChCC,gBAAQC,GAAR,CAAY,wDAAZ;AACAX,gBAAQO,IAAR;AACH,KAHD;AAIH,CAZD,MAYO;AACHG,YAAQC,GAAR,CAAY,YAAYX,QAAQS,MAAR,CAAeG,EAA3B,GAAgC,YAA5C;AACAX,YAAQ,UAAR;AACH","file":"cluster.js","sourcesContent":["/*jshint esversion: 6 */\r\n'use strict';\r\n\r\nconst cluster = require('cluster');\r\n//Count the machine's CPUs\r\nconst numCPUs = require('os').cpus().length;\r\n\r\nif (cluster.isMaster) {\r\n    //cluster.schedulingPolicy = cluster.SCHED_RR;\r\n    // Create a worker for each CPU\r\n    for (var i = 0; i < numCPUs; i += 1) {\r\n        cluster.fork();\r\n    }\r\n\r\n    // Listen for dying workers\r\n    cluster.on('exit', function(worker) {\r\n        console.log('Worker ${worker.process.pid} died. Spawning new worker');\r\n        cluster.fork();\r\n    });\r\n} else {\r\n    console.log('Worker ' + cluster.worker.id + \" is online\");\r\n    require('./server');\r\n}\r\n"]}